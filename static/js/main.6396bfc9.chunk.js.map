{"version":3,"sources":["components/DropDown.js","components/AutoSuggest.js","components/InfoCard.js","App.js","serviceWorker.js","index.js","images/pokemon.png"],"names":["DropDown","props","className","suggested","map","pokemon","index","active","key","onClick","handleInputClick","name","AutoSuggest","onChange","handleChange","value","userValue","placeholder","onKeyUp","press","length","selected","InfoCard","arr","pokemonData","charAt","toUpperCase","slice","src","sprites","front_default","alt","click","label","height","abilities","ability","stats","currentStat","stat","base_stat","App","state","allPokemon","selectedIndex","pokemonSelected","event","all","input","target","filter","toLowerCase","indexOf","setState","a","fetch","url","response","json","info","pokeArray","push","handleKeyPress","keyCode","console","log","remove","storedChar","splice","data","alphabetical","sortBy","results","this","pokeObj","poke","nameClicker","pokemonName","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.6396bfc9.chunk.js","sourcesContent":["import React from \"react\";\nimport \"../DropDown.css\";\n\nconst DropDown = (props) => {\n    return (\n        <div className=\"drop-down\">\n        {props.suggested ? (\n          props.suggested.map((pokemon, index) => {\n            return (\n              <h3 className={pokemon.active} key={index} onClick={() => props.handleInputClick(index)}>\n                {pokemon.name}\n              </h3>\n            );\n          })\n        ) : (\n          <h1>Loading...</h1>\n        )}\n      </div>\n    )\n}\n\nexport default DropDown","import React from \"react\";\nimport \"../autoSuggest.css\";\nimport DropDown from \"./DropDown\";\n\nconst AutoSuggest = props => {\n  return (\n    <div>\n      <div className=\"ui\">\n        <input onChange={props.handleChange} value={props.userValue} placeholder=\"Search for PokÃ©mon Data\" onKeyUp={props.press}/>\n      </div>\n      {props.suggested.length > 0 ? (\n      <DropDown suggested={props.suggested} handleInputClick={props.handleInputClick} selected={props.selected}/>\n      ):(\n        null\n        )}\n    </div>\n  );\n};\n\nexport default AutoSuggest;\n","import React from \"react\";\nimport \"../infoCard.css\";\n\nconst InfoCard = props => {\n  // console.log(props.pokemonData);\n  let arr = props.pokemonData.name.charAt(0).toUpperCase() + props.pokemonData.name.slice(1)\n  return (\n    <div className=\"card\">\n      <div className=\"pics\">\n        <img className=\"poke\" src={props.pokemonData.sprites.front_default} alt=\"pokemon character\"/>\n        <img className=\"deleteIcon\" onClick={() => props.click(props.label)} src=\"https://img.icons8.com/cotton/64/000000/delete-sign--v1.png\" alt=\"delete\"></img>\n      </div>\n      <div className=\"info\">\n        <h3>Name: <span>{arr}</span></h3>\n        <h3>Height: <span>{props.pokemonData.height}</span></h3>\n        <h3 className=\"subTitle\">Abiltities</h3>\n        {props.pokemonData.abilities.map((ability, index) => {\n          return <p key={index}>{ability.ability.name}</p>;\n        })}\n        <h3 className=\"subTitle\">Stats: </h3>\n        {props.pokemonData.stats.map((currentStat, index) => {\n          return (\n            <p key={index}>\n              {currentStat.stat.name}: {currentStat.base_stat}\n            </p>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default InfoCard;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport AutoSuggest from \"./components/AutoSuggest\";\nimport InfoCard from \"./components/InfoCard\";\nimport sortBy from \"lodash/sortBy\"\nimport poke from \"./images/pokemon.png\"\n\nclass App extends Component {\n  state = {\n    allPokemon: null,\n    userValue: \"\",\n    selectedIndex: null,\n    pokemonSelected: [],\n    suggested:[],\n    index: -1\n  };\n\n  //this is a React lifecycle method (part of react)\n  //you may want to look it up, and also might want to remind yourself about async/await\n  async componentDidMount() {\n    const response = await fetch(\"https://pokeapi.co/api/v2/pokemon?limit=151\");\n    const data = await response.json();\n    const alphabetical = sortBy(data.results,\"name\")\n    this.setState({ allPokemon: alphabetical });\n    let arr = await alphabetical.map(pokeObj => {\n      return { name: pokeObj.name.charAt(0).toUpperCase() + pokeObj.name.slice(1), url: pokeObj.url}\n    })\n    this.setState({ allPokemon: arr});\n  }\n\n  handleChange = event => {\n    const all = this.state.allPokemon\n    const input = event.target.value\n    let filter = null\n    if (event.target.value.length > 0){\n      filter = all.filter( pokemon =>{\n        return pokemon.name.toLowerCase().slice(0, input.length).indexOf(input.toLowerCase()) > -1\n      })\n      filter.map((value)=> {\n        return value.active = \"inactive\"\n      })\n      this.setState({ userValue: event.target.value, suggested:filter});\n    }else{\n      this.setState({ userValue: event.target.value, suggested:[]})\n    }\n  };\n\n  handleInputClick = async (index) => {\n    const response = await fetch(this.state.suggested[index].url)\n    const info = await response.json()\n    let pokeArray = this.state.pokemonSelected;\n    if (this.state.pokemonSelected.length < 4) {\n      pokeArray.push(info);\n    }\n    this.setState({ userValue:\"\", selectedIndex: index, suggested:[]});\n  };\n\n  handleKeyPress = async (event) => {\n    let suggested = this.state.suggested\n    let value = event.keyCode\n    let index = this.state.index\n    switch (true) {\n      case value === 38:\n        index--\n        break\n      case value === 40:\n        index++\n        break\n      case value === 13:\n        const response = await fetch(this.state.suggested[index].url)\n        const info = await response.json()\n        let pokeArray = this.state.pokemonSelected;\n        if (this.state.pokemonSelected.length < 4) {\n          pokeArray.push(info);\n        }\n        suggested = []\n        this.setState({userValue:\"\"})\n        break\n      default:\n        console.log(\"other input detected\")\n    }\n    if (index > suggested.length-1) {\n      index = suggested.length-1\n    }else if (index < 0) {\n      index = 0\n    }\n    if (index >= 0 && suggested.length > 0) {\n      suggested.map((value)=> {\n        return value.active = \"inactive\"\n      })\n      suggested[index].active = \"active\"\n    }\n    console.log(index)\n    this.setState({suggested:suggested, index: index})\n  }\n\n  remove = (index) => {\n    let storedChar = this.state.pokemonSelected;\n    storedChar.splice(index, 1)\n    this.setState({pokemonSelected: storedChar})\n  }\n\n  render() {\n    const { allPokemon, userValue, pokemonSelected, suggested} = this.state;\n    return (\n      <div className=\"main\">\n        <img className=\"logo\" src={poke} alt=\"poke logo\"></img>\n        <AutoSuggest\n          data={allPokemon}\n          userValue={userValue}\n          suggested={suggested}\n          selected={pokemonSelected}\n          handleChange={this.handleChange}\n          handleInputClick={this.handleInputClick}\n          click={this.nameClicker}\n          press={this.handleKeyPress}\n        />\n        <div className=\"card-container\">\n          {pokemonSelected.map((pokemon, index) => {\n            return (\n              <div>\n                <InfoCard click={() => this.remove(index)} key={index} pokemonData={pokemon} pokemonName={allPokemon} />\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/pokemon.49255cb2.png\";"],"sourceRoot":""}